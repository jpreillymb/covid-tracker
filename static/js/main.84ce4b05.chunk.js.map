{"version":3,"sources":["Components/Header.js","Components/TopStats.js","Actions/statsActions.js","Components/CurrentNews.js","Actions/newsActions.js","Components/CountrySelect.js","Actions/countryActions.js","Components/Footer.js","Components/Article.js","Components/CovidChart.js","App.js","serviceWorker.js","Reducers/statsReducer.js","Reducers/newsReducer.js","Reducers/countryReducer.js","Reducers/index.js","Store/index.js","index.js"],"names":["connect","state","data","info","loadingStats","currentCountry","current","props","stats","Active","Recovered","Deaths","date","formatted_date","Date","toLocaleDateString","toLocaleTimeString","Global","TotalConfirmed","TotalRecovered","TotalDeaths","country","Countries","find","element","Slug","country_date","labels","datasets","label","backgroundColor","hoverBackgroundColor","className","options","responsive","title","display","text","fontSize","legend","position","cutoutPercentage","src","alt","dispatch","fetchStats","a","type","fetch","res","json","payload","useEffect","Card","CardContent","Typography","gutterBottom","variant","start","end","duration","separator","news","newsapi","loadingNews","fetchNews","then","catch","error","fetchNewsFailure","Paper","elevation","style","overflow","articles","map","article","key","url","updateCountry","updateCurrentCountry","handleChange","event","target","value","FormControl","Select","id","onChange","FormHelperText","MenuItem","Country","Footer","role","aria-label","Article","imageUrl","urlToImage","indexOf","replace","webUrl","color","Box","fontWeight","letterSpacing","lineHeight","description","Link","href","component","loadingChart","chartData","fetchChart","fetchChartData","chart","length","daily","toDateString","Confimed","borderColor","fill","Confirmed","App","Component","Boolean","window","location","hostname","match","initialState","combineReducers","action","middleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.84ce4b05.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Pie } from 'react-chartjs-2';\nimport '../App.css';\n\nexport const Header = (props) => {\n\n    var stats = {}\n    if (props.loadingStats) {\n        stats = {\n            Active: 0,\n            Recovered: 0,\n            Deaths: 0,\n            date: \"Loading...\"\n        }\n    } else if (props.currentCountry === \"Global\") {\n        var formatted_date = new Date(props.data.Date);\n        formatted_date = formatted_date.toLocaleDateString() + \" at \" + formatted_date.toLocaleTimeString()\n        stats = {\n            Active: props.data.Global.TotalConfirmed - props.data.Global.TotalRecovered - props.data.Global.TotalDeaths,\n            Recovered: props.data.Global.TotalRecovered,\n            Deaths: props.data.Global.TotalDeaths,\n            date: formatted_date\n        }\n    } else {\n        var country = props.data.Countries.find(element => element.Slug === props.currentCountry);\n        if (!country) {\n            stats = {\n                Active: 0,\n                Recovered: 0,\n                Deaths: 0,\n                date: \"No date found\"\n            }\n        } else {\n            var country_date = new Date(country.Date);\n            country_date = country_date.toLocaleDateString() + \" at \" + country_date.toLocaleTimeString()\n            stats = {\n                Active: country.TotalConfirmed - country.TotalRecovered - country.TotalDeaths,\n                Recovered: country.TotalRecovered,\n                Deaths: country.TotalDeaths,\n                date: country_date\n            }\n        }\n    }\n\n    var state = {\n        labels: ['Active', 'Recovered', 'Deaths'],\n        datasets: [\n          {\n            label: 'COVID-19 Cases',\n            backgroundColor: [\n                'darkorange',\n                'mediumseagreen',\n                'orangered'\n            ],\n            hoverBackgroundColor: [\n                'darkorange',\n                'mediumseagreen',\n                'orangered'\n            ],\n            data: [stats.Active, stats.Recovered, stats.Deaths]\n          }\n        ]\n    }\n\n    return (\n        <div className=\"header\">\n    \n            <div className=\"outline\">\n                <Pie\n                    data={state}\n                    options={{\n                        responsive: false,\n                        title:{\n                        display:false,\n                        text:'COVID-19 Cases',\n                        fontSize:20\n                        },\n                        legend:{\n                        display:false,\n                        position:'top'\n                        },\n                        cutoutPercentage: 60,\n                    }}\n                />\n            </div>\n            <img \n                className=\"covid-logo\" \n                src='covid19icon.png'\n                title='covid-19 icon'\n                alt=\"\"\n            />\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    data: state.info.data,\n    loadingStats: state.info.loadingStats,\n    currentCountry: state.currentCountry.current\n})\n\nconst mapDispatchToProps = {\n    \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header)\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStats } from '../Actions/statsActions';\nimport CountUp from 'react-countup';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport '../App.css';\n\nconst TopStats = (props) => {\n\n    useEffect(() => {\n        props.fetchStats()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    var stats = {}\n    if (props.loadingStats) {\n        stats = {\n            Active: 0,\n            Recovered: 0,\n            Deaths: 0,\n            date: \"Loading...\"\n        }\n    } else if (props.currentCountry === \"Global\") {\n        var formatted_date = new Date(props.data.Date);\n        formatted_date = formatted_date.toLocaleDateString() + \" at \" + formatted_date.toLocaleTimeString()\n        stats = {\n            Active: props.data.Global.TotalConfirmed - props.data.Global.TotalRecovered - props.data.Global.TotalDeaths,\n            Recovered: props.data.Global.TotalRecovered,\n            Deaths: props.data.Global.TotalDeaths,\n            date: formatted_date\n        }\n    } else {\n        var country = props.data.Countries.find(element => element.Slug === props.currentCountry);\n        if (!country) {\n            stats = {\n                Active: 0,\n                Recovered: 0,\n                Deaths: 0,\n                date: \"No date found\"\n            }\n        } else {\n            var country_date = new Date(country.Date);\n            country_date = country_date.toLocaleDateString() + \" at \" + country_date.toLocaleTimeString()\n            stats = {\n                Active: country.TotalConfirmed - country.TotalRecovered - country.TotalDeaths,\n                Recovered: country.TotalRecovered,\n                Deaths: country.TotalDeaths,\n                date: country_date\n            }\n        }\n    }\n\n    return (\n        <div className=\"card-container\">\n            <div className=\"card-container-box\">\n                <Card>\n                    <CardContent>\n                        <Typography className=\"orange\" gutterBottom> Active </Typography>\n                        <Typography variant=\"h5\"> \n                            <CountUp\n                                start={0}\n                                end={stats.Active}\n                                duration={3}\n                                separator=','\n                            />\n                        </Typography>\n                        <Typography variant=\"caption\" className=\"stats-date-color\"> As of: {stats.date} </Typography>\n                    </CardContent>\n                </Card>\n            </div>\n            <div className=\"card-container-box\">\n                <Card>\n                    <CardContent>\n                        <Typography className=\"green\" gutterBottom> Recovered </Typography>\n                        <Typography variant=\"h5\"> \n                            <CountUp\n                                start={0}\n                                end={stats.Recovered} \n                                duration={3}\n                                separator=','\n                            />\n                        </Typography>\n                        <Typography variant=\"caption\" className=\"stats-date-color\"> As of: {stats.date} </Typography>\n                    </CardContent>\n                </Card>\n            </div>\n            <div className=\"card-container-box\">\n                <Card>\n                    <CardContent>\n                        <Typography className=\"red\" gutterBottom> Deaths </Typography>\n                        <Typography variant=\"h5\"> \n                            <CountUp\n                                start={0}\n                                end={stats.Deaths} \n                                duration={3}\n                                separator=','\n                            />\n                        </Typography>\n                        <Typography variant=\"caption\" className=\"stats-date-color\"> As of: {stats.date} </Typography>\n                    </CardContent>\n                </Card>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    data: state.info.data,\n    loadingStats: state.info.loadingStats,\n    currentCountry: state.currentCountry.current\n})\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchStats: () => {\n            dispatch(fetchStats())\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopStats)\n","export const FETCH_STATS_BEGIN   = 'FETCH_STATS_BEGIN';\nexport const FETCH_STATS_SUCCESS = 'FETCH_STATS_SUCCESS';\nexport const FETCH_STATS_FAILURE = 'FETCH_STATS_FAILURE';\nexport const FETCH_CHARTDATA_BEGIN = 'FETCH_CHARTDATA_BEGIN';\nexport const FETCH_CHARTDATA_SUCCESS = 'FETCH_CHARTDATA_SUCCESS';\nexport const FETCH_CHARTDATA_FAILURE = 'FETCH_CHARTDATA_FAILURE';\n\nexport const fetchStatsBegin = () => ({\n  type: FETCH_STATS_BEGIN\n});\n\nexport const fetchStatsSuccess = stats => ({\n  type: FETCH_STATS_SUCCESS,\n  payload: stats\n});\n\nexport const fetchStatsFailure = error => ({\n  type: FETCH_STATS_FAILURE,\n  payload: error\n});\n\nexport const fetchStats = () => async dispatch => {\n    dispatch(fetchStatsBegin());\n    try {\n    const res = await fetch('https://api.covid19api.com/summary');\n    const json = await res.json();\n    dispatch(fetchStatsSuccess(json));\n    return json;\n  }\n  catch (error) {\n    return fetchStatsFailure(error);\n  }\n};\n\nexport const fetchChartBegin = () => ({\n  type: FETCH_CHARTDATA_BEGIN\n});\n\nexport const fetchChartSuccess = chart => ({\n  type: FETCH_CHARTDATA_SUCCESS,\n  payload: chart\n});\n\nexport const fetchChartFailure = error => ({\n  type: FETCH_CHARTDATA_FAILURE,\n  payload: error\n});\n\nexport const fetchChartData = (country) => async dispatch => {\n    dispatch(fetchChartBegin());\n    try {\n    var url = 'https://api.covid19api.com/total/dayone/country/' + country\n    const res = await fetch(url);\n    const json = await res.json();\n    dispatch(fetchChartSuccess(json));\n    return json;\n  }\n  catch (error) {\n    return fetchChartFailure(error);\n  }\n};","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchNews } from '../Actions/newsActions';\nimport { Article } from '.';\nimport { Typography, Paper } from '@material-ui/core';\nimport '../App.css';\n\nconst CurrentNews = (props) => {\n\n    useEffect(() => {\n        props.fetchNews()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (props.loadingNews) {\n        return (\n        <div>\n            <Typography variant=\"h6\" className=\"recent-news\"> \n                Most Recent COVID-19 News\n            </Typography>\n            <Paper elevation={1} className=\"news-container\" style={{overflow: 'auto'}}>\n                <Typography variant=\"caption\"> \n                    Loading...\n                </Typography>\n            </Paper>\n        </div>\n        );\n    }\n\n    return (\n        <div>\n            <Typography variant=\"h6\" className=\"recent-news\"> \n                Most Recent COVID-19 News\n            </Typography>\n            <Paper className=\"news-container\" style={{overflow: 'auto'}}>\n                { props.news.articles.map((article) => \n                    <Article key={article.url} data={article} />\n                )}\n            </Paper> \n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    news: state.newsapi.news,\n    loadingNews: state.newsapi.loadingNews\n})\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchNews: () => {\n            dispatch(fetchNews())\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentNews)\n","export const FETCH_NEWS_BEGIN   = 'FETCH_NEWS_BEGIN';\nexport const FETCH_NEWS_SUCCESS = 'FETCH_NEWS_SUCCESS';\nexport const FETCH_NEWS_FAILURE = 'FETCH_NEWS_FAILURE';\n\nexport const fetchNewsBegin = () => ({\n    type: FETCH_NEWS_BEGIN\n  });\n  \n  export const fetchNewsSuccess = news => ({\n    type: FETCH_NEWS_SUCCESS,\n    payload: news\n  });\n  \n  export const fetchNewsFailure = error => ({\n    type: FETCH_NEWS_FAILURE,\n    payload: error\n  });\n  \nvar newsUrl = 'https://newsapi.org/v2/top-headlines?' +\n  'q=COVID&' +\n  'from=2020-05-05&' +\n  'sortBy=publishedAt&' +\n  'language=en&' +\n  'apiKey=8f9a8fb03809415f9e03ba0a0caad5e2';\n\nexport const fetchNews = () => dispatch => {\n    dispatch(fetchNewsBegin());\n    return fetch(newsUrl)\n        .then(res => res.json())\n        .then(json => {\n            dispatch(fetchNewsSuccess(json));\n            return json;\n        })\n        .catch(error => fetchNewsFailure(error));\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { MenuItem, FormHelperText, FormControl, Select, Paper } from '@material-ui/core';\nimport { updateCurrentCountry } from '../Actions/countryActions';\nimport '../App.css';\n\nconst CountrySelect = (props) => {\n\n    const handleChange = (event) => {\n        const country = event.target.value;\n        props.updateCountry(country);\n    }\n\n    if (props.loadingStats) {\n        return (\n            <div className=\"country-select-container\">\n                <FormControl className=\"country-select\">\n                    <Select\n                        id=\"country-picker\"\n                        value=\"\"\n                        onChange={handleChange}\n                        label=\"Country\"\n                        >\n                    </Select>\n                    <FormHelperText>Loading countries...</FormHelperText>\n                </FormControl>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"country-select-container\">\n            <Paper className=\"select-margin\">\n                <FormControl className=\"country-select\">\n                    <Select\n                        id=\"country-picker\"\n                        value={props.currentCountry}\n                        onChange={handleChange}\n                        label=\"Country\"\n                        >   \n                            <MenuItem value=\"Global\">Global Totals</MenuItem>\n                            {props.data.Countries.map((country) =>\n                                <MenuItem key={country.Slug} value={country.Slug}>{country.Country}</MenuItem>\n                            )}\n                    </Select>\n                    <FormHelperText>Choose a country to view its data</FormHelperText>\n                </FormControl>\n            </Paper>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    data: state.info.data,\n    loadingStats: state.info.loadingStats,\n    currentCountry: state.currentCountry.current\n})\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateCountry: (country) => {\n            dispatch(updateCurrentCountry(country))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CountrySelect)\n\n","export const UPDATE_CURRENT_COUNTRY   = 'UPDATE_CURRENT_COUNTRY';\n\nexport const updateCurrentCountry = (country) => ({\n    type: UPDATE_CURRENT_COUNTRY,\n    payload: country\n  });","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport '../App.css';\n\nfunction Footer() {\n    return (\n        <Typography className=\"footer\">\n            Made by JP Reilly <span role=\"img\" aria-label=\"dnavirus\">🧬🦠</span>\n        </Typography>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport { Card, Link, Typography, Box } from '@material-ui/core';\nimport '../App.css';\n\nconst Article = props => {\n\n    var imageUrl = props.data.urlToImage;\n    if (imageUrl === \"\") {\n        imageUrl = \"/placeholder.png\";\n    } else if (imageUrl.indexOf(\"https://\") === -1) {\n        imageUrl = imageUrl.replace(\"http://\", \"https://\");\n    }\n\n    var webUrl = props.data.url;\n\n    if (webUrl.indexOf(\"https://\") === -1) {\n        webUrl = webUrl.replace(\"http://\", \"https://\");\n    }\n   \n    return (\n        <div className=\"article-padding\">\n            <Card>\n                <div className=\"article-container\">\n                    <img \n                        className=\"article-image\" \n                        src={imageUrl} \n                        title={props.data.title}\n                        alt=\"\"\n                        />\n                    <div className=\"article-text\">\n                        <Typography className=\"article-spacer\" color=\"textPrimary\" variant=\"overline\">\n                            <Box fontWeight=\"fontWeightBold\" fontSize={12} letterSpacing={1.5} lineHeight={1}>\n                                {props.data.title}\n                            </Box>\n                        </Typography>\n                        <Typography className=\"article-spacer\" color=\"textSecondary\" variant=\"caption\">\n                            <Box fontSize={8} letterSpacing={1} lineHeight={1}>\n                                {props.data.description}\n                            </Box>\n                        </Typography>\n                        <Link href={webUrl}>\n                            <Typography component={'span'} color=\"primary\">\n                                <Box fontSize={8} letterSpacing={1} lineHeight={1}>\n                                    Click to Read More\n                                </Box>\n                            </Typography>\n                        </Link>\n                    </div>\n                </div>\n            </Card>\n        </div>\n    )\n}\n\nexport default Article;\n\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Typography, Card } from '@material-ui/core';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { fetchChartData } from '../Actions/statsActions';\nimport '../App.css';\n\nexport const CovidChart = (props) => {\n\n  useEffect(() => {\n    if (props.currentCountry !== 'Global') {\n      props.fetchChart(props.currentCountry);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.currentCountry]);\n\n  var chart = null;\n\n  if (!props.loadingStats && props.currentCountry === \"Global\") {\n    const state = {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [\n        {\n          label: 'COVID CASES',\n          backgroundColor: [\n            'darkorange',\n            'mediumseagreen',\n            'orangered',\n          ],\n          hoverBackgroundColor: [\n            'darkorange',\n            'mediumseagreen',\n            'orangered',\n          ],\n          data: [props.data.Global.TotalConfirmed - props.data.Global.TotalRecovered - props.data.Global.TotalDeaths, props.data.Global.TotalRecovered, props.data.Global.TotalDeaths],\n        },\n      ],\n    };\n\n    var barChart1 = (\n      <Bar\n        data={state}\n        options={{\n            legend:{\n              display: false\n            }\n        }}\n      />\n    );\n    chart = barChart1;\n    } else if (!props.loadingChart && props.chartData.length === 1) {\n        const state = {\n            labels: ['Infected', 'Recovered', 'Deaths'],\n            datasets: [\n              {\n                label: 'COVID-19 Cases',\n                backgroundColor: [\n                  'darkorange',\n                  'mediumseagreen',\n                  'orangered',\n                ],\n                hoverBackgroundColor: [\n                  'darkorange',\n                  'mediumseagreen',\n                  'orangered',\n                ],\n                data: [props.chartData[0].Confirmed - props.chartData[0].Recovered - props.chartData[0].Deaths, props.chartData[0].Recovered, props.chartData[0].Deaths],\n              },\n            ],\n          };\n      \n          var barChart2 = (\n            <Bar\n              data={state}\n              options={{\n                legend:{\n                    display: false\n                }\n            }}\n            />\n          );\n          chart = barChart2;\n\n  } else if (!props.loadingChart && (props.currentCountry !== \"Global\")){\n    var lineChart = (\n      <Line\n        data={{\n          labels: props.chartData.map((daily) => {\n            const day = new Date(daily.Date);\n            return day.toDateString();\n          }),\n          datasets: [{\n            data: props.chartData.map((daily) => daily.Confimed - daily.Recovered - daily.Deaths),\n            label: 'Active',\n            borderColor: 'darkorange',\n            fill: true,\n          }, {\n            data: props.chartData.map((daily) => daily.Recovered),\n            label: 'Recovered',\n            borderColor: 'mediumseagreen',\n            fill: true,\n          }, {\n            data: props.chartData.map((daily) => daily.Deaths),\n            label: 'Deaths',\n            borderColor: 'orangered',\n            fill: true,\n          }],\n        }}\n      />\n    );\n    chart = lineChart;\n  } else {\n    var loading = (<Typography> Loading... </Typography>);\n    chart = loading;\n  }\n\n  return (\n    <Card className=\"chart-container\">\n      { chart }\n    </Card>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  data: state.info.data,\n  loadingStats: state.info.loadingStats,\n  loadingChart: state.info.loadingChart,\n  chartData: state.info.chartData,\n  currentCountry: state.currentCountry.current,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchChart: (country) => {\n    dispatch(fetchChartData(country));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CovidChart);\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Header, TopStats, CurrentNews, CovidChart, CountrySelect, Footer} from './Components';\n\nclass App extends Component {\n\n  render() {\n   \n    return (\n      <div className=\"parallax\">\n      <div className=\"Container\" >\n        <Header />\n        <TopStats />\n        <CountrySelect />\n        <CovidChart />\n        <CurrentNews />\n        <Footer />\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_STATS_BEGIN, FETCH_STATS_SUCCESS, FETCH_STATS_FAILURE } from '../Actions/statsActions';\nimport { FETCH_CHARTDATA_BEGIN, FETCH_CHARTDATA_SUCCESS, FETCH_CHARTDATA_FAILURE } from '../Actions/statsActions';\n\nconst initialState = {\n    data: [],\n    loadingStats: true,\n    loadingChart: true,\n    chartData: [],\n    error: null\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case FETCH_STATS_BEGIN:\n            return {\n                ...state,\n                loadingStats: true,\n                error: null\n            };\n        case FETCH_STATS_SUCCESS:\n            return {\n                ...state,\n                loadingStats: false,\n                data: action.payload\n            };\n        case FETCH_STATS_FAILURE:\n            return {\n                ...state,\n                loadingStats: false,\n                data: [],\n                error: action.payload\n            };\n        case FETCH_CHARTDATA_BEGIN:\n            return {\n                ...state,\n                loadingChart: true,\n                error: null\n            };\n        case FETCH_CHARTDATA_SUCCESS:\n            return {\n                ...state,\n                loadingChart: false,\n                chartData: action.payload\n            };\n        case FETCH_CHARTDATA_FAILURE:\n            return {\n                ...state,\n                loadingChart: false,\n                chartData: [],\n                error: action.payload\n            };\n        default: \n            return state;\n    }\n}","import { FETCH_NEWS_BEGIN, FETCH_NEWS_SUCCESS, FETCH_NEWS_FAILURE } from '../Actions/newsActions';\n\nconst initialState = {\n    news: [],\n    loadingNews: true,\n    error: null\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case FETCH_NEWS_BEGIN:\n            return {\n                ...state,\n                loadingNews: true,\n                error: null\n            };\n        case FETCH_NEWS_SUCCESS:\n            return {\n                ...state,\n                loadingNews: false,\n                news: action.payload\n            };\n        case FETCH_NEWS_FAILURE:\n            return {\n                ...state,\n                loadingNews: false,\n                news: [],\n                error: action.payload\n            }\n        default: \n            return state;\n    }\n}","import { UPDATE_CURRENT_COUNTRY } from '../Actions/countryActions';\n\nconst initialState = {\n    current: \"united-states\"\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case UPDATE_CURRENT_COUNTRY:\n            return {\n                ...state,\n                current: action.payload\n            };\n        default: \n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport statsReducer from './statsReducer';\nimport newsReducer from './newsReducer';\nimport countryReducer from './countryReducer';\n\nexport default combineReducers({\n    info: statsReducer,\n    newsapi: newsReducer,\n    currentCountry: countryReducer,\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../Reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n\nconst store = createStore(\n    rootReducer, \n    initialState, \n    composeEnhancers(\n        applyMiddleware(...middleware)\n    )\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\n\nimport store from './Store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}